#! /bin/bash

[ "$1" = "-d" ] && set -x
default=$HOME/vm/snapshots
default_instf=./test.txt #$default/.instances


# get all the snapshot files

function start {
if [ -e $default_instf -a -s $default_instf ]
then
	[ "$1" = "-tmp" ] && snapshot="-snapshot" || snapshot=""
	printf "Choose one of the following instances: \n"
	list_inst
	printf "> "; read instance
	if [[ $instance =~ ^[0-9]+$ ]]
	then
		eval $(awk -F "@@@" '$1 !~ /^---.+/ { origin_command=$2; extra=$3 } NR == '$instance'{ if ($1 !~ /^---.+/) { if ( $3 == "none" ) print $2 " -drive file=" $4 " '$snapshot'"; else $2 " -drive file=" $4 "," $3 " '$snapshot'"} else { name=gensub(/^---/, "", 1, $1); if ( extra == "none" ) print origin_command " -drive file=" $2 " '$snapshot'"; else print origin_command " -drive file=" $2 "," extra " '$snapshot'" } }' $default_instf) &
	elif [ "$instance" = "e" -o "$instance" = "exit" ]
	then
		printf "Returning to main menu\n"
	else
		printf "Number was not inputed\nRestarting...\n"
		start
	fi
else
	printf "No instances available\n"
	exit 1
fi
}

function list_inst {
if [ -e $default_instf ] 
then	
	printf "\nList of instances:\n\n"
	if [ "$1" = "-inst" ]
	then
		awk -F "@@@" '$1 !~ /^---.+/ { if ( $3 == "none" ) print "\n" count ")\nName: \033[97m\033[44m" $1 "\033[0m\nCommand: " $2 " -drive file=" $4; else print "\n" count ")\nName: \033[97m\033[44m" $1 "\033[0m\nCommand: " $2 " -drive file=" $4 "," $3 ; count += 1 }' count=1 $default_instf

	else
		awk -F "@@@" '{ if ($1 !~ /^---.+/) { origin_name=$1; origin_command=$2; extra=$3;  if ( $3 == "none" ) print "\n" NR ")\nName: \033[97m\033[44m" $1 "\033[0m\nCommand: " $2 " -drive file=" $4; else print "\n" NR ")\nName: \033[97m\033[44m" $1 "\033[0m\nCommand: " $2 " -drive file=" $4 "," $3 } else { name=gensub(/^---/, "", 1, $1); if ( extra == "none" ) print "\n" NR ")\nName: \033[34m" name "\033[0m\nSnapshot of: " origin_name "\nCommand: " origin_command " -drive file=" $2; else print "\n" NR ")\nName: \033[34m" name "\033[0m\nSnapshot of: " origin_name "\nCommand: " origin_command " -drive file=" $2 "," extra } }' $default_instf
	fi
else
	printf "No instance file\nExiting...\n" 1>&2
	exit 1
fi

}

function write_inst {
[ -e $default_instf ] || printf "" > $default_instf
if [ $? != 0 ]
then
	printf "Unable to create instances file $default_instf\nExiting...\n"
	exit 1
fi

printf "\nName your instance: "
read name
printf "Qemu command (ex: qemu-system-x86 -m 2G...) with the drive option omitted\n> "
read com
printf "Full path of the OS drive (specified with -drive file=<path>)\n> "
read drive_path
printf "Any other drive options (ex: if=<interface>, bus=<bus>)[default: \"\"] "
read ext
if [ "$name" = "exit" -o "$name" = "e" -o "$com" = "exit" -o "$com" = "e" -o "$drive_path" = "exit" -o "$drive_path" = "e" -o "$ext" = "exit" -o "$ext" = "e" ]
then
	printf "Returning to main menu\n"
elif [ -n "$name" -a -n "$com" -a -n "$drive_path" ] && awk -F "@@@" "\$1 ~ /$name/ { exit 1 }" $default_instf
then
	printf "Is this your final command: $com -drive file=$drive_path$([ -n $ext ] && printf ",")$ext(y/n) "
	read ans
	[ -z $ext ] && ext="none"
	[ "$ans" = "y" ] && printf "$name@@@$com@@@$ext@@@${drive_path}\n" >> $default_instf || write
else
	printf "A parameter was left blank or the your name is the same as a previously named instance...\nRestarting\n"
	write_inst
fi


}

function delete_inst {
[ -s $default_instf ] || (printf "$default_instf not found or is empty\nExiting...\n" ; exit 1)
list_inst
printf "Which instance would you like to delete: "
read del

if [ "$del" = "exit" -o "$del" = "e" ]
then
	printf "Returning to main menu\n"
elif [ "$del" -le "$(awk  -F '@@@' '$1 !~ /^---.+/ { count += 1 } END { print count }' count=1 $default_instf)" -a "$del" -ge "1" ]
then
	printf "$(awk -F '@@@' '$1 !~ /^---.+/ { count += 1; print   } count == '$del' {  }' count=1 $default_instf)"
else
	printf "Invalid instance number\nRestarting...\n\n"
	delete_inst
fi

}

function create_snap {
[ -s $default_instf ] || (printf "$default_instf not found or is empty\nExiting...\n"; exit 1)
list_inst -inst
printf "Which of the following would you like to create a snapshot of? "
read ans
[[ "$ans" =~ ^[0-9]+$ ]] || (printf "Invalid option\n"; create_snap)
[ "$ans" -ge "1" -a "$ans" -le "$(awk -F "@@@" 'BEGIN { count = 0 } $1 !~ /^---.+/ { count += 1 } END { print count }' $default_instf)" ] || create_snap
printf "Enter a name for the snapshot: "
read name
printf "Enter a file name for the snapshot: "
read file_name
if [ "$name" = "exit" -o "$name" = "e" -o "$file_name" = "exit" -o "$file_name" = "e" ]
then
	printf "Returning to main menu\n"
elif awk -F "@@@" '$1 ~ /^---.+/ { sub("---", "", $1); if (name == $1 || file_name == $2) exit 1 }' name="$name" file_name="$default/$file_name" $default_instf
then
	qemu-img create -f qcow2 -b $(awk -F "@@@" 'BEGIN { count=0 } $1 !~ /^---.+/ { count += 1; if (count == ans) { print $4; exit 0 } }' ans=$ans $default_instf) -F qcow2 $default/$file_name \
		&& (printf "$(awk -F "@@@" 'BEGIN { count=0 } { if ($1 !~ /^---.+/) { count += 1; print $0; if (count == ans) print "---" name "@@@" file_name } else { print $0 }}' name="$name" file_name="$default/$file_name" ans=$ans $default_instf)" > $default_instf; printf "Snapshot \"$name\" created succussfully!\n" ) || printf "Unable to create a snapshot\n"
else
	printf "Name or File name already exits\nRestarting...\n"
	create_snap
fi






}

function delete_snap {

exit
}



function main {
	[ -d $default ] || mkdir -p $default
	if [ $? != 0 ]
	then
		printf "Unable to create main virtualization directory for snapshots $default\nExiting...\n"
		exit 1
	fi

	printf "\n\e[1m\e[35m1)\e[0m \e[36mStart an instance as a snapshot (temporary)\e[0m\n\
\e[1m\e[35m2)\e[0m \e[97m\e[46mStart an instance with permenant storage\e[0m\n\
\e[1m\e[35m3)\e[0m \e[33mList instances\e[0m\n\
\e[1m\e[35m4)\e[0m \e[97m\e[44mWrite a new instance\e[0m\n\
\e[1m\e[35m5)\e[0m \e[97m\e[41mDelete an instance\e[0m\n\
\e[1m\e[35m6)\e[0m \e[34mCreate a Snapshot file for an instance\e[0m\n\
\e[1m\e[35m7)\e[0m \e[31mDelete a Snapshot file for an instance\e[0m\n\
> "
	read opt
	case $opt in
		1)
			start -tmp
			;;
		2)
			start
			;;
		3)
			list_inst
			;;
		4)
			write_inst
			;;
		5)
			delete_inst
			;;
		6)
			create_snap
			;;
		7)
			delete_snap
			;;
		*)
			printf "Option not found\n"
			;;
	esac


}

printf "\e[1m\e[4m\e[35mQLab - QEMU Snapshot manager\e[0m\n"
if qemu-img --version > /dev/null 2>&1
then
	while :
	do
		main
	done
else
	printf "qemu-img not installed\n"
	printf "Make sure you have qemu software\n"
fi

