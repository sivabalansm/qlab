#! /bin/bash

[ "$1" = "-d" ] && set -x
default=$HOME/vm/snapshots
default_instf=$default/.instances


# get all the snapshot files

function start {
if [ -e $default_instf -a -s $default_instf ]
then
	[ "$1" = "-tmp" ] && snapshot="-snapshot" || snapshot=""
	printf "Choose one of the following instances: \n"
	awk -F "@@@" '{ if ( $3 == "none" ) print "\n" NR ")\nName: "$1"\nCommand: "$2" -drive file="$4; else print "\n" NR ")\nName: "$1"\nCommand: "$2" -drive file="$4","$3 }' $default_instf
	printf "> "; read instance
	if [[ $instance =~ ^[0-9]+$ ]]
	then
		eval $(awk -F "@@@" "NR == $instance { if ( \$3 == \"none\" ) print \$2\" -drive file=\"\$4\" $snapshot\"; else print \$2\" -drive file=\"\$4\",\"\$3\" $snapshot\" }" $default_instf)&
	elif [ "$instance" = "e" -o "$instance" = "exit" ]
	then
		printf "Returning to main menu\n"
	else
		printf "Number was not inputed\nRestarting...\n"
		start
	fi
else
	printf "No instances available\n"
	exit 1
fi
}

function list_inst {
if [ -e $default_instf ] 
then	
	printf "\nList of instances:\n\n"
	awk -F "@@@" '{ if ( $3 == "none" ) print "\n" NR ")\nName: "$1"\nCommand: "$2" -drive file="$4; else print "\n" NR ")\nName: "$1"\nCommand: "$2" -drive file="$4","$3 }' $default_instf
else
	printf "No instance file\nExiting...\n" 1>&2
	exit 1
fi

}

function write_inst {
[ -e $default_instf ] || printf "" > $default_instf
if [ $? != 0 ]
then
	printf "Unable to create instances file $default_instf\nExiting...\n"
	exit 1
fi

printf "\nName your instance: "
read name
printf "Qemu command (ex: qemu-system-x86 -m 2G...) with the drive option omitted\n> "
read com
printf "Full path of the OS drive (specified with -drive file=<path>)\n> "
read drive_path
printf "Any other drive options (ex: if=<interface>, bus=<bus>)[default: \"\"] "
read ext
if [ "$name" = "exit" -o "$name" = "e" -o "$com" = "exit" -o "$com" = "e" -o "$drive_path" = "exit" -o "$drive_path" = "e" -o "$ext" = "exit" -o "$ext" = "e" ]
then
	printf "Returning to main menu\n"
elif [ -n "$name" -a -n "$com" -a -n "$drive_path" ] && awk -F "@@@" "\$1 ~ /$name/ { exit 1 }" $default_instf
then
	printf "Is this your final command: $com -drive file=$drive_path,$ext(y/n) "
	read ans
	[ -z $ext ] && ext="none"
	[ "$ans" = "y" ] && printf "$name@@@$com@@@$ext@@@${drive_path}\n" >> $default_instf || write
else
	printf "A parameter was left blank or the your name is the same as a previously named instance...\nRestarting\n"
	write_inst
fi


}

function delete_inst {
[ -e $default_instf -a -s $default_instf ] || (printf "$default_instf not found or is empty\nExiting...\n" ; exit 1)
list_inst
printf "Which instance would you like to delete: "
read del

if [ "$del" = "exit" -o "$del" = "e" ]
then
	printf "Returning to main menu\n"
elif [ "$del" -le "$(awk 'END { print NR }' $default_instf)" -a "$del" -ge "1" ]
then
	printf "$(awk 'NR != '$del' { print }' $default_instf)" > $default_instf
else
	printf "Invalid instance number\nRestarting...\n\n"
	delete_inst
fi

}

function create_snap {

exit
}

function delete_snap {

exit
}



function main {
	[ -d $default ] || mkdir -p $default
	if [ $? != 0 ]
	then
		printf "Unable to create main virtualization directory for snapshots $default\nExiting...\n"
		exit 1
	fi

	printf "\n1) Start an instance as a snapshot (temporary)\n\
2) Start an instance with permenant storage\n\
3) List instances\n\
4) Write a new instance\n\
5) Delete an instance\n\
6) Create a Snapshot file for an instance\n\
7) Delete a Snapshot file for an instance\n\
> "
	read opt
	case $opt in
		1)
			start -tmp
			;;
		2)
			start
			;;
		3)
			list_inst
			;;
		4)
			write_inst
			;;
		5)
			delete_inst
			;;
		6)
			create_snap
			;;
		7)
			delete_snap
			;;
		*)
			printf "Option not found\n"
			;;
	esac


}

printf "QLab - QEMU Snapshot manager\n"
if qemu-img --version > /dev/null 2>&1
then
	while :
	do
		main
	done
else
	printf "qemu-img not installed\n"
	printf "Make sure you have qemu software\n"
fi

